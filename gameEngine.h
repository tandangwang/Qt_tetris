#ifndef GAMEENGINE_H
#define GAMEENGINE_H

#include <QObject>

#include "board.h"
#include "shape.h"

class gameEngine : public QObject
{
    Q_OBJECT
public:
    gameEngine();
    ~gameEngine();

    /* member function */

    /* <1> response key events */
    void keyUp_rotate();
    /* --------------------------------------------------------------------
     * blow 3 funcions reponse to short & long press;
     * in this class, only have one speed to move to all directions,
     * will change speed by decreasing the timeInterval of mainWindow's timer.
     * -------------------------------------------------------------------*/
    void keyDown_moveDown();
    void keyLeft_moveLeft();
    void keyRight_moveRight();

    /* <2> response button events */
    void initGame();
    inline void suspend()
    {
        m_bGameSuspend = true;
    }
    inline void unSuspend()
    {
        m_bGameSuspend = false;
    }
    bool isGameSuspend();

    /* <3> game routine */
    void putShapeOnTwoBoards();
    void curShapeAutoMoveDown();  // with logic judge when stop moving, moving distance
    void copyShapeColorToMainboard();
    unsigned eliminateFullRows();
    inline void updateScore(unsigned _score)
    {
        m_score += _score;
        emit scoreValueChanged(_score);
    }
    bool isGameOver();

    /* <4> LCD score */
    int getScore() const;

    bool isBtnPlayFirstTimeClicked() const {return m_bFirstTimeClickBtnPlay;}
    void setFirstTimeClickBtnPlay(bool _bValue)
    {
        m_bFirstTimeClickBtnPlay = _bValue;
    }
//    bool isFirstRoundGame() const { return m_isFirstRound; }
//    void setFirstRoundGame(bool _bValue) { m_isFirstRound = _bValue; }

    void setSpeedToFast()
    {
        m_moveSpeed = CUR_SHAPE_MOVING_SPEED_FAST;
    }
    void setSpeedToSlow()
    {
        m_moveSpeed = CUR_SHAPE_MOVING_SPEED_SLOW;
    }

    /* <5> draw game */
    void drawGame(QPainter& _painter) const;

private:
    /********** data member *********/
    /* [1] physical components */
    board* m_mainBoard;
    board* m_nextBoard;
    shape* m_curShape;
    shape* m_nextShape;
    unsigned m_score;
    unsigned m_moveSpeed;

    /* [2] game state */
    bool m_bOkToMoveDown;
    bool m_bGameSuspend;
    bool m_bFirstTimeClickBtnPlay;

    /* encapsulation */
    bool isReachedBottom() const;
    bool isReachedVisibleCell() const;

signals:
    /* --------------------------------------------------------------
     * Signals are automatically generated by the moc and must not be
     * implemented in the .cpp file.
     * They can never have return types (i.e. use void).
     * --------------------------------------------------------------*/
    void scoreValueChanged(unsigned) const;
};

#endif  // GAMEENGINE_H
